Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:
    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String
      Default: dev-1
    
    imageId:
      Description: An environment name that will be prefixed to resource names
      Type: String
      Default: ami-0986e6d2d2bc905ca

    anyWhereCIDR:
      Description: CIDR to allow access from anywhere
      Type: String
      Default: 0.0.0.0/0

Resources:

  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub "${EnvironmentName}-web-servers"
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install nginx -y
            echo "<html><body><h1>It works! Udagram, Udacity</h1></body></html>" | sudo tee /var/www/html/index.html
            sudo service nginx start
        ImageId: !Ref imageId
        SecurityGroupIds:
          - !Ref WebServerSecGroup
        InstanceType: t2.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
        IamInstanceProfile:
          Name: !Ref WebServerInstanceProfile

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our hosts from the LB Security Group
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref anyWhereCIDR

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref anyWhereCIDR
  
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebServerInstanceRole

  WebServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-web-servers"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:GetObject'
              - 's3:PutObject'
              Resource:
                - !GetAtt S3Bucket.Arn

  WebServerScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: '2'
      DesiredCapacity: '2'
      MaxSize: '3'
      TargetGroupARNs:
      - Ref: WebServerTargetGroup

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebServerTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebServerTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-udagram-project-2-vincent"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      LifecycleConfiguration:
        Rules:
          - Status: "Enabled"
            NoncurrentVersionExpirationInDays: 10
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

Outputs:
  WebServerScalingGroup:
    Description: The ID of the WebServerScalingGroup
    Value: !Ref WebServerScalingGroup

  WebAppLB:
    Description: The ID of the WebAppLB
    Value: !Ref WebAppLB
  
  WebAppLBURL:
    Description: The DNSName of the WebAppLB
    Value: !GetAtt WebAppLB.DNSName 

  S3Bucket:
    Description: The ID of the S3Bucket
    Value: !Ref S3Bucket